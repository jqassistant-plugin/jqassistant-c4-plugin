// Generated by delombok at Fri Aug 02 01:04:37 UTC 2024
package org.jqassistant.plugin.c4.data;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * Representation of a C4 building block, i.e. all elements except a {@link Boundary}.
 *
 * @author Stephan Pirnbaum
 */
public abstract class AbstractBuildingBlock extends AbstractElement {
    private final String description;
    private final boolean external;
    private final SecondaryElementType secondaryElementType;
    private final Set<String> technologies;
    private Map<String, String> properties;

    @Override
    public String buildStringRepresentation() {
        return String.format("%s{%s%s%s%s%s%s}", buildLabelString(), buildAliasString(), buildNameString(), buildDescriptionString(), buildTechnologiesString(), buildExternalString(), buildPropertiesString());
    }

    private String buildDescriptionString() {
        if (StringUtils.isNotEmpty(this.description)) {
            return ", description: \"" + this.description + "\"";
        } else {
            return "";
        }
    }

    private String buildExternalString() {
        return ", external: " + this.external;
    }

    private String buildPropertiesString() {
        if (this.properties != null && this.properties.size() > 0) {
            return ", " + properties.entrySet().stream().map(e -> e.getKey().replaceAll(" ", "") + ": \"" + e.getValue() + "\"").collect(Collectors.joining(", "));
        } else {
            return "";
        }
    }

    private String buildTechnologiesString() {
        if (CollectionUtils.isNotEmpty(this.technologies)) {
            return ", technologies: [" + this.technologies.stream().map(s -> "\"" + s + "\"").collect(Collectors.joining(", ")) + "]";
        } else {
            return "";
        }
    }

    @Override
    Set<String> getAdditionalStereotypes() {
        Set<String> labels = new LinkedHashSet<>();
        labels.add(getPrimaryElementTypeLabel());
        if (this.secondaryElementType != null) {
            this.secondaryElementType.getLabel().ifPresent(labels::add);
        }
        return labels;
    }

    abstract String getPrimaryElementTypeLabel();

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private static Set<String> $default$technologies() {
        return new HashSet<>();
    }


    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static abstract class AbstractBuildingBlockBuilder<C extends AbstractBuildingBlock, B extends AbstractBuildingBlock.AbstractBuildingBlockBuilder<C, B>> extends AbstractElement.AbstractElementBuilder<C, B> {
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private String description;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private boolean external;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private SecondaryElementType secondaryElementType;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private boolean technologies$set;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private Set<String> technologies$value;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private Map<String, String> properties;

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public B description(final String description) {
            this.description = description;
            return self();
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public B external(final boolean external) {
            this.external = external;
            return self();
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public B secondaryElementType(final SecondaryElementType secondaryElementType) {
            this.secondaryElementType = secondaryElementType;
            return self();
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public B technologies(final Set<String> technologies) {
            this.technologies$value = technologies;
            technologies$set = true;
            return self();
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public B properties(final Map<String, String> properties) {
            this.properties = properties;
            return self();
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        protected abstract B self();

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public abstract C build();

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "AbstractBuildingBlock.AbstractBuildingBlockBuilder(super=" + super.toString() + ", description=" + this.description + ", external=" + this.external + ", secondaryElementType=" + this.secondaryElementType + ", technologies$value=" + this.technologies$value + ", properties=" + this.properties + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected AbstractBuildingBlock(final AbstractBuildingBlock.AbstractBuildingBlockBuilder<?, ?> b) {
        super(b);
        this.description = b.description;
        this.external = b.external;
        this.secondaryElementType = b.secondaryElementType;
        if (b.technologies$set) this.technologies = b.technologies$value;
         else this.technologies = AbstractBuildingBlock.$default$technologies();
        this.properties = b.properties;
    }
}
